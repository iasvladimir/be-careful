//
//  VerifyCodeViewController.swift
//  BeCareful
//
//  Created by Mariana Parente on 24/08/20.
//  Copyright (c) 2020 Jose Alberto. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol VerifyCodeDisplayLogic: class {
    func displayPhoneNumber(viewModel: VerifyCode.DataPhoneNumber.ViewModel)
    func displayRegisterComplete()
    func displayError(viewModel: VerifyCode.RegisterSuccess.ViewModel)
}

class VerifyCodeViewController: UIViewController, VerifyCodeDisplayLogic {
    var interactor: VerifyCodeBusinessLogic?
    var router: (NSObjectProtocol & VerifyCodeRoutingLogic & VerifyCodeDataPassing)?
    
    @IBOutlet private weak var titleCode: UILabel!
    @IBOutlet private weak var code: UITextField!
    @IBOutlet private weak var separator: UIView!
    @IBOutlet private weak var error: UILabel!
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = VerifyCodeInteractor()
        let presenter = VerifyCodePresenter()
        let router = VerifyCodeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        self.code.delegate = self
        interactor?.getPhoneNumber()
    }
    
    // MARK: IBAction
    @IBAction func verifyCode() {
        let request = VerifyCode.RegisterSuccess.Request(code: code.text ?? "")
        interactor?.completeRegister(request: request)
    }
    
    // MARK: Actions
    func displayPhoneNumber(viewModel: VerifyCode.DataPhoneNumber.ViewModel) {
        titleCode.text = viewModel.title
    }
    
    func displayRegisterComplete() {
        router?.goToHome()
    }
    
    func displayError(viewModel: VerifyCode.RegisterSuccess.ViewModel) {
        DispatchQueue.main.async {
            self.error.isHidden = false
            self.separator.backgroundColor = .red
            
            let alertController = UIAlertController(title: nil, message: viewModel.errorMessage, preferredStyle: .alert)
            let accept = UIAlertAction(title: "Accept", style: .default, handler: nil)
            alertController.addAction(accept)
            self.present(alertController, animated: true, completion: nil)
        }
    }
}

extension VerifyCodeViewController: UITextFieldDelegate {

    func textFieldDidBeginEditing(_ textField: UITextField) {
        separator.backgroundColor = UIColor.smBlue
        error.isHidden = true
    }

    func textFieldDidEndEditing(_ textField: UITextField) {
        separator.backgroundColor = .black
    }

    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        code.endEditing(true)
        return true
    }

    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        self.view.endEditing(true)
    }

    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        guard let textFieldText = textField.text,
            let rangeOfTextToReplace = Range(range, in: textFieldText) else {
                return false
        }
        let substringToReplace = textFieldText[rangeOfTextToReplace]
        let count = textFieldText.count - substringToReplace.count + string.count
        return count <= 11
    }
}
